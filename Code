using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp2
{
    internal class Program
    {
        static char[] NAC3Board = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
        static string[] NAC4Board = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16" };
        static int PlayerTurn = 1;
        static int WinCondition = 0;
        static int BoardPosition;
        static int ErrorCondition = 0;
        static void Main(string[] args)
        {
            StartGame();
        }
        public static void StartGame()
        {
            string input;
            Console.WriteLine("Type 1 for Rock Paper Scissors, 2 for Naught and Crosses and 3 for Shut Down");
            input = Console.ReadLine();
            //Choosing Game
            if (input == "2")
            {
                NAC();
            }
            else if (input == "1")
            {
                RPS();
            }
            else if (input == "3")
            {
                //Shut Down Program
                System.Environment.Exit(1);
            }
            else
            {
                Console.Clear();
                Console.WriteLine("NO!");
                StartGame();
            }
            Console.ReadLine();
        }
        public static void RPS()
        {
            string input;
            Console.WriteLine("Type 1 for Rock, 2 for Paper or 3 for Scissor");
            input = Console.ReadLine();
            Console.Clear();
            //Stating what you've inputed
            if (input == "1") // Rock
            {
                Console.WriteLine("You Played Rock");
            }
            else if (input == "2") // Paper
            {
                Console.WriteLine("You Played Paper");
            }
            else if (input == "3") // Scissors
            {
                Console.WriteLine("You Played Scissors");
            }
            else
            {
                Console.WriteLine("Try Again");
                RPS();
                return;
            }
            //Generating random response from bot
            Random rand = new Random();
            int bot = rand.Next(1, 4);
            //Stating what the bot played
            if (bot == 1) // Rock
            {
                Console.WriteLine("The Bot Played Rock");
            }
            if (bot == 2) // Paper
            {
                Console.WriteLine("The Bot Played Paper");
            }
            if (bot == 3) // Scissors
            {
                Console.WriteLine("The Bot Played Scissors");
            }
            //Win checking
            if (bot == 1) // Rock
            {
                if (input == "1")
                {
                    Console.WriteLine("Draw\n");
                    GoBackToMenu();
                }
                if (input == "2")
                {
                    Console.WriteLine("You WIN\n");
                    GoBackToMenu();
                }
                if (input == "3")
                {
                    Console.WriteLine("You LOSE\n");
                    GoBackToMenu();
                }
            }
            if (bot == 2) // Paper
            {
                if (input == "1")
                {
                    Console.WriteLine("You LOSE\n");
                    GoBackToMenu();
                }
                if (input == "2")
                {
                    Console.WriteLine("Draw\n");
                    GoBackToMenu();
                }
                if (input == "3")
                {
                    Console.WriteLine("You WIN\n");
                    GoBackToMenu();
                }
            }
            if (bot == 3) // Scissors
            {
                if (input == "1")
                {
                    Console.WriteLine("You WIN\n");
                    GoBackToMenu();
                }
                if (input == "2")
                {
                    Console.WriteLine("You LOSE\n");
                    GoBackToMenu();
                }
                if (input == "3")
                {
                    Console.WriteLine("Draw\n");
                    GoBackToMenu();
                }
            }
        }
        public static void NAC()
        {
            Console.WriteLine("Type 3 for a 3x3 board or 4 for a 4x4 board");
            string input;
            input = Console.ReadLine();
            if (input == "3")
            {
                NAC3();
            }
            if (input == "4")
            {
                NAC4();
            }
            else
            {
                Console.WriteLine("Invalid Input");
            }
        }
        public static void NAC3()
        {
            PlayerTurn = 1;
            //Reseting Board
            for (int i = 1; i < 10; i++)
            {
                NAC3Board[i] = i.ToString()[0];
            }    
            do
            {
                Console.Clear();
                Console.WriteLine("Player 1 is X and Player 2 is O\n");
                //Stating Whos Turn
                if (PlayerTurn == 1)
                {
                    Console.WriteLine("Player 1's Turn\n");
                }
                else
                {
                    Console.WriteLine("Player 2's Turn\n");
                }
                DrawThreeBoard();
                Console.WriteLine("\n");
                Console.WriteLine("Type 1-9 to play");
                //Error Message
                if (ErrorCondition == 1)
                {
                    Console.WriteLine("Sorry the space " + BoardPosition + " is already marked with " + NAC3Board[BoardPosition]);
                    ErrorCondition = 0;
                }
                else if (ErrorCondition == 2)
                {
                    Console.WriteLine("Sorry the space you specified is nonexistent");
                    ErrorCondition = 0;
                }
                //Error checking
                if (!int.TryParse(Console.ReadLine(), out BoardPosition))
                {
                    ErrorCondition = 2;
                    continue;
                }
                if (BoardPosition < 1 || BoardPosition > 9)
                {
                    ErrorCondition = 2;
                    continue;
                }
                if (NAC3Board[BoardPosition] == 'X' || NAC3Board[BoardPosition] == 'O')
                {
                    ErrorCondition = 1;
                    continue;
                }
                //Deciding making it X or O based on player turn
                if (PlayerTurn == 1)
                {
                    NAC3Board[BoardPosition] = 'X';
                    PlayerTurn = 2;
                }
                else
                {
                    NAC3Board[BoardPosition] = 'O';
                    PlayerTurn = 1;
                }
                //Checking if any win/draw conditions have been met
                WinCondition = CheckThreeWinConditions();
            }
            //Continue if no conditions have been met
            while (WinCondition == 0);
            Console.Clear();
            //Redraw Board with changed squares (X or O)
            DrawThreeBoard();
            //Figuring out who won based on player turn
            if (WinCondition == 1)
            {
                if (PlayerTurn == 1)
                {
                    Console.WriteLine("\n");
                    Console.WriteLine("Player 2 (X) Has WON!\n");
                    GoBackToMenu();
                }
                else
                {
                    Console.WriteLine("\n");
                    Console.WriteLine("Player 1 (X) Has WON!\n");
                    GoBackToMenu();
                }
            }
            else
            {
                Console.WriteLine("Draw");
                GoBackToMenu();
            }
        }
        public static void DrawThreeBoard()
        {
            Console.WriteLine("     |     |");
            Console.WriteLine("  {0}  |  {1}  |  {2}", NAC3Board[1], NAC3Board[2], NAC3Board[3]);
            Console.WriteLine("_____|_____|_____ ");
            Console.WriteLine("     |     |");
            Console.WriteLine("  {0}  |  {1}  |  {2}", NAC3Board[4], NAC3Board[5], NAC3Board[6]);
            Console.WriteLine("_____|_____|_____ ");
            Console.WriteLine("     |     |");
            Console.WriteLine("  {0}  |  {1}  |  {2}", NAC3Board[7], NAC3Board[8], NAC3Board[9]);
            Console.WriteLine("     |     |");
        }
        public static int CheckThreeWinConditions()
        {
            // Horizontal Win Conditions
            if (NAC3Board[1] == NAC3Board[2] && NAC3Board[2] == NAC3Board[3])
            {
                return 1;
            }
            else if (NAC3Board[4] == NAC3Board[5] && NAC3Board[5] == NAC3Board[6])
            {
                return 1;
            }
            else if (NAC3Board[7] == NAC3Board[8] && NAC3Board[8] == NAC3Board[9])
            {
                return 1;
            }
            // Vertical Win Conditions
            else if (NAC3Board[1] == NAC3Board[4] && NAC3Board[4] == NAC3Board[7])
            {
                return 1;
            }
            else if (NAC3Board[2] == NAC3Board[5] && NAC3Board[5] == NAC3Board[8])
            {
                return 1;
            }
            else if (NAC3Board[3] == NAC3Board[6] && NAC3Board[6] == NAC3Board[9])
            {
                return 1;
            }
            // Diagonal Win Conditions
            else if (NAC3Board[1] == NAC3Board[5] && NAC3Board[5] == NAC3Board[9])
            {
                return 1;
            }
            else if (NAC3Board[3] == NAC3Board[5] && NAC3Board[5] == NAC3Board[7])
            {
                return 1;
            }
            // Draw Condition
            else if (NAC3Board[1] != '1' && NAC3Board[2] != '2' && NAC3Board[3] != '3' && NAC3Board[4] != '4' && NAC3Board[5] != '5' && NAC3Board[6] != '6' && NAC3Board[7] != '7' && NAC3Board[8] != '8' && NAC3Board[9] != '9')
            {
                return 2;
            }
            // Continue if no Conditions were met
            else
            {
                return 0;
            }
        }
        public static void NAC4()
        {
            PlayerTurn = 1;
            //Reseting Board
            for (int i = 1; i < 17; i++)
            {
                NAC4Board[i] = i.ToString();
            }
            do
            {
                Console.Clear();
                Console.WriteLine("Player 1 is X and Player 2 is O\n");
                //Stating Whos Turn
                if (PlayerTurn == 1)
                {
                    Console.WriteLine("Player 1's Turn\n");
                }
                else
                {
                    Console.WriteLine("Player 2's Turn\n");
                }
                DrawFourBoard();
                Console.WriteLine("\n");
                Console.WriteLine("Type 1-16 to play");
                //Error Message
                if (ErrorCondition == 1)
                {
                    Console.WriteLine("Sorry the space " + BoardPosition + " is already marked with " + NAC4Board[BoardPosition]);
                    ErrorCondition = 0;
                }
                else if (ErrorCondition == 2)
                {
                    Console.WriteLine("Sorry the space you specified is nonexistent");
                    ErrorCondition = 0;
                }
                //Error checking
                if (!int.TryParse(Console.ReadLine(), out BoardPosition))
                {
                    ErrorCondition = 2;
                    continue;
                }
                if (BoardPosition < 1 || BoardPosition > 16)
                {
                    ErrorCondition = 2;
                    continue;
                }
                if (NAC4Board[BoardPosition] == "X" || NAC4Board[BoardPosition] == "O" || NAC4Board[BoardPosition] == " O" || NAC4Board[BoardPosition] == " X")
                {
                    ErrorCondition = 1;
                    continue;
                }
                //Deciding making it X or O based on player turn
                if (PlayerTurn == 1)
                {
                    NAC4Board[BoardPosition] = "X";
                    PlayerTurn = 2;
                }
                else
                {
                    NAC4Board[BoardPosition] = "O";
                    PlayerTurn = 1;
                }
                //Checking if any win/draw conditions have been met
                WinCondition = CheckFourWinConditions();
            }
            //Continue if no conditions have been met
            while (WinCondition == 0);
            Console.Clear();
            //Redraw Board with changed squares (X or O)
            DrawFourBoard();
            //Figuring out who won based on player turn
            if (WinCondition == 1)
            {
                if (PlayerTurn == 1)
                {
                    Console.WriteLine("\n");
                    Console.WriteLine("Player 2 (O) Has WON!\n");
                    GoBackToMenu();
                }
                else
                {
                    Console.WriteLine("\n");
                    Console.WriteLine("Player 1 (X) Has WON!\n");
                    GoBackToMenu();
                }
            }
            else
            {
                Console.WriteLine("Draw");
                GoBackToMenu();
            }
        }
        public static void DrawFourBoard()
        {
            Console.WriteLine("     |     |     |     ");
            Console.WriteLine(" {0}  | {1}  | {2}  | {3}  ", NAC4Board[1].PadLeft(2, ' '), NAC4Board[2].PadLeft(2, ' '), NAC4Board[3].PadLeft(2, ' '), NAC4Board[4].PadLeft(2, ' '));
            Console.WriteLine("_____|_____|_____|_____ ");
            Console.WriteLine("     |     |     |     ");
            Console.WriteLine(" {0}  | {1}  | {2}  | {3}  ", NAC4Board[5].PadLeft(2, ' '), NAC4Board[6].PadLeft(2, ' '), NAC4Board[7].PadLeft(2, ' '), NAC4Board[8].PadLeft(2, ' '));
            Console.WriteLine("_____|_____|_____|_____ ");
            Console.WriteLine("     |     |     |     ");
            Console.WriteLine(" {0}  | {1}  | {2}  | {3}  ", NAC4Board[9].PadLeft(2, ' '), NAC4Board[10].PadLeft(2, ' '), NAC4Board[11].PadLeft(2, ' '), NAC4Board[12].PadLeft(2, ' '));
            Console.WriteLine("_____|_____|_____|_____ ");
            Console.WriteLine("     |     |     |     ");
            Console.WriteLine(" {0}  | {1}  | {2}  | {3}  ", NAC4Board[13].PadLeft(2, ' '), NAC4Board[14].PadLeft(2, ' '), NAC4Board[15].PadLeft(2, ' '), NAC4Board[16].PadLeft(2, ' '));
            Console.WriteLine("     |     |     |     ");
        }        
        public static int CheckFourWinConditions()
        {
            for (int i = 1; i < 9; i++)
            {
                if (NAC4Board[i] == NAC4Board[i+4] && NAC4Board[i+4] == NAC4Board[i+8])
                {
                    return 1;
                }
            }
            for (int i = 1; i < 17; i += 4)
            {
                if (NAC4Board[i] == NAC4Board[i + 1] && NAC4Board[i + 1] == NAC4Board[i + 2])
                {
                    return 1;
                }
                if (NAC4Board[i + 1] == NAC4Board[i + 2] && NAC4Board[i + 2] == NAC4Board[i + 3])
                {
                    return 1;
                }
            }
            for (int i = 1; i < 17; i += 4)
            {
                if (NAC4Board[i] == NAC4Board[i + 1] && NAC4Board[i + 1] == NAC4Board[i + 2])
                {
                    return 1;
                }
                if (NAC4Board[i + 1] == NAC4Board[i + 2] && NAC4Board[i + 2] == NAC4Board[i + 3])
                {
                    return 1;
                }
            }
            int[] middles = { 6, 7, 10, 11 };

            foreach (int i in middles)
            {
                if (NAC4Board[i] == NAC4Board[i - 5] && NAC4Board[i - 5] == NAC4Board[i + 5])
                {
                    return 1;
                }
                if (NAC4Board[i] == NAC4Board[i - 3] && NAC4Board[i - 3] == NAC4Board[i + 3])
                {
                    return 1;
                }
            }
            for (int i = 1; i < 17; i++)
            {
                if (NAC4Board[i] == i.ToString()) return 0;
            }
            return 2;
        }
        public static void GoBackToMenu()
        {
            Console.WriteLine("Type 1 to go back menu or 2 to Shut Down");
            string back = Console.ReadLine();
            if (back == "1")
            {
                Console.Clear();
                StartGame();
            }
            else if (back == "2")
            {
                System.Environment.Exit(1);
            }
            else
            {
                Console.Clear();
                Console.WriteLine("Try again");
                GoBackToMenu();
            }
        }
    }
}
